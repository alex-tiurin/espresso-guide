apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.atiurin.espressoguide"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "io.qameta.allure.espresso.AllureAndroidRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "espressoguide"
        property "sonar.projectBaseDir", "."
        property "sonar.source","app/src/main/java"
        property "sonar.tests", "app/src/test/java, app/src/androidTest/java"
        property "sonar.java.test.binaries", "app/build/intermediates/class/debug"
        property "sonar.jacoco.reportPath", "app/build/jacoco/testDebugUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
    }
}
jacoco {
    toolVersion = '0.8.0'
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.60"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation "androidx.fragment:fragment-ktx:1.2.2"
    // AndroidJUnitRunner and JUnit Rules

    testImplementation "org.robolectric:robolectric:4.2"
    testImplementation "androidx.test:core:1.2.0"
    testImplementation 'org.mockito:mockito-core:2.23.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'

    // Espresso dependencies
    androidTestImplementation fileTree(dir: 'libs', include: ['*.jar', '*.aar']) // allure artifacts
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'com.google.code.gson:gson:2.8.6'

    //Allure
    androidTestImplementation "io.qameta.allure:allure-android-commons:2.0.0"
    androidTestImplementation "io.qameta.allure:allure-android-model:2.0.0"
    androidTestImplementation "io.qameta.allure:allure-espresso:2.0.0"

    //espresso-page-object
    androidTestImplementation 'com.atiurin.espresso:espressopageobject:0.1.16'

    //Android Test Orchestrator
    androidTestUtil 'androidx.test:orchestrator:1.2.0'
}






//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}